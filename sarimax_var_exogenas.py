# -*- coding: utf-8 -*-
"""SARIMAX_Var_Exogenas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z9wNCPApkHqnXExHlDDRckY4HKq0dQPQ
"""

!pip install scipy
!pip install pmdarima

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import statsmodels.api as sm
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tools.eval_measures import mse

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

from pmdarima.arima import auto_arima

df = pd.read_csv("price.csv")
df.head()

df['Mean'] = (df['Low'] + df['High']) / 2

df.head(2)

steps = -1
df_for_pred = df.copy()
df_for_pred['Actual'] = df_for_pred['Mean'].shift(steps)
df_for_pred = df_for_pred.dropna()
df_for_pred.head()

df_for_pred['Date'] = pd.to_datetime(df_for_pred['Date'])
df_for_pred.set_index('Date', inplace=True)
df_for_pred.head()

df_for_pred['Mean'].plot(color='green', figsize=(15,2))

df_for_pred["Volume"].plot(color="blue", figsize=(15,2))
plt.title("Apple Stock Volume")

sd = sm.tsa.seasonal_decompose(df_for_pred['Mean'], model ='add', period = 365)
fig=sd.plot()
plt.show()

sc_in = MinMaxScaler(feature_range = (0,1))
scaled_input = sc_in.fit_transform(df_for_pred[["Low", "High","Open", "Close", "Volume", "Adj Close", "Mean"]])
scaled_input = pd.DataFrame(scaled_input)
x = scaled_input

scaled_output = sc_in.fit_transform(df_for_pred[['Actual']])
scaled_output = pd.DataFrame(scaled_output)
y = scaled_output

x.rename(columns={0:'Low', 1:'High', 2:'Open', 3:'Close', 4:'Volume', 5:'Adj Close', 6:'Mean'}, inplace=True)
x.index=df_for_pred.index
x.head(2)

y.rename(columns={0:'Preco_Acao'}, inplace=True)
y.index=df_for_pred.index
y.head()

# Separação Train Test na mão
train_size = int(len(df)*0.7)
test_size = int(len(df)) - train_size
train_x, train_y = x[:train_size].dropna(), y[:train_size].dropna()
test_x, test_y = x[train_size:].dropna(), y[train_size:].dropna()

# Usando train test split para separar
train_size = int(len(df)*0.7)
test_size = int(len(df)) - train_size
train_x, test_x, train_y, test_y = train_test_split(
    x.dropna(), y.dropna(),
    test_size=0.3,
    shuffle=False
)

step_wise = auto_arima(train_y,
                       exogenous=train_x,
                       start_p = 1, start_q=1,
                       max_p=7, max_q=7,
                       d=1, max_d=7,
                       trace=True,
                       error_action='ignore',
                       suppress_warings=True,
                       stepwise=True)

step_wise.summary()

train_x = np.array(train_x)
train_y = np.array(train_y)

model = SARIMAX(train_y,
                exog=train_x,
                order=(0,1,1),
                enforce_invertibility=False,
                enforce_stationarity=False)

model_fit = model.fit()

preds = model_fit.predict(start=train_size, end=train_size+test_size+(steps)-1, exog=test_x)

act = pd.DataFrame(scaled_output.iloc[train_size:,0])
act.index=test_x.index

preds=pd.DataFrame(preds)
preds.reset_index(drop=True, inplace=True)
preds.index=test_x.index
preds['Actual'] = act['Preco_Acao']
preds.rename(columns={0:'Pred'}, inplace=True)
preds.head()

preds['Actual'].plot(figsize=(20,8), legend=True, color='Blue')
preds['Pred'].plot(legend=True, color='Red', figsize=(20,8))

error = mse(preds['Pred'], preds['Actual'])
error

